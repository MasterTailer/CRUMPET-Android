//   Copyright 2019 Dan Leinir Turthra Jensen <admin@leinir.dk>
//
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU Library General Public License as
//   published by the Free Software Foundation; either version 3, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU Library General Public License for more details
//
//   You should have received a copy of the GNU Library General Public License
//   along with this program; if not, see <https://www.gnu.org/licenses/>

class BTConnectionManagerProxy {
    PROP(bool isConnected READONLY)
    PROP(bool discoveryRunning READONLY)
    PROP(int deviceCount READONLY)
    PROP(int commandQueueCount READONLY)
    PROP(int bluetoothState READONLY)

    SLOT(void runCommand(const QString& command))
    SLOT(void startDiscovery())
    SLOT(void stopDiscovery())
    SLOT(void sendMessage(const QString& message, const QStringList& deviceIDs))
    SLOT(void connectToDevice(const QString& deviceID))
    SLOT(void disconnectDevice(const QString& deviceID))
    SLOT(void setDeviceName(const QString& deviceID, const QString& deviceName))
    SLOT(void setDeviceChecked(const QString& deviceID, bool checked))
    SLOT(void setDeviceListeningState(const QString& deviceID, int listeningMode))
    SLOT(void setDeviceTiltState(const QString& deviceID, bool tiltState))

    // Use this to call a function on a specific device without digging too deeply (for example, call the checkOTA function)
    SLOT(void callDeviceFunction(const QString& deviceID, const QString& functionName))
    SLOT(void callDeviceFunctionWithParameter(const QString& deviceID, const QString& functionName, const QVariant &parameter))
    // Use this to set a property on a specific device without digging too deeply (changes get tracked through the device model)
    SLOT(void setDeviceProperty(const QString& deviceID, const QString& property, const QVariant& value))

    // Designed to fill up a map with information, based on the command found in the QVariantMap key "command"'s value
    PROP(QVariantMap command)
    SLOT(QVariantMap getCommand(const QString& command))

    SLOT(void setDeviceCommandsFileEnabled(const QString& deviceID, const QString& filename, bool enabled))
    SLOT(void setDeviceGestureEventCommand(const QString& deviceID, const int &gestureEvent, const QStringList &targetDeviceIDs, const QString &command))

    SIGNAL(messageReceived(const QString &sender, const QString &message))
    SIGNAL(message(const QString& message))
    SIGNAL(blockingMessage(const QString& title, const QString& message))
    SIGNAL(deviceConnected(const QString& deviceID))
};
